(* EBNF representation of UML 2.5 Behavior StateMachine *)
(* Copyright 2018 Ryan Chaves *)

(* Language keywords *)
@@keyword               :: stm
@@keyword               :: conn_point
@@keyword               :: initial
@@keyword               :: final
@@keyword               :: deepHistory
@@keyword               :: shallowHistory
@@keyword               :: join
@@keyword               :: fork
@@keyword               :: junction
@@keyword               :: choice
@@keyword               :: entryPoint
@@keyword               :: exitPoint
@@keyword               :: terminate
@@keyword               :: state
@@keyword               :: region
@@keyword               :: entry
@@keyword               :: exit
@@keyword               :: do

(* Grammar *)
file_input              = {state_machine}+ $
                        ;
state_machine           = 'stm' id_base '{' {statement}+ '}'
                        ;
statement               = vertex
                        | transition
                        ;
vertex                  = pseudostate
                        | state
                        | submachine_state
                        ;
conn_point              = 'conn_point' ('entry'|'exit') id
                        ;
pseudostate             = 'deepHistory' id
                        | 'shallowHistory' id
                        | join
                        | fork
                        | 'junction' id
                        | choice
                        | entrypoint
                        | exitpoint
                        | 'terminate'
                        ;
join                    = 'join' id ['->' id [effect_decl]]
                        ;
fork                    = 'fork' id ['{' fork_transition {fork_transition}+ '}']
                        ;
fork_transition         = '->' id [effect_decl]
                        ;
choice                  = 'choice' id ['{' {choice_transition}+ '}']
                        ;
choice_transition       = '->' id '?' guard_decl
                        ;
entrypoint              = 'entryPoint' id '->' id
                        ;
exitpoint               = 'exitPoint'  id ['->' id]
                        ;
state                   = 'state' state_name ['{' {statement|region|behavior}+ '}']
                        ;
region                  = 'region' id '{' {statement}+ '}'
                        ;
submachine_state        = 'submachine' state_name submachine_name ['{' {conn_point_decl}+ '}']
                        ;
conn_point_decl         = 'entryPoint'  id_base
                        | 'exitPoint'   id_base
                        ;
transition              = local_transition
                        | external_transition
                        | internal_transition
                        ;
internal_transition     = trigger
                        ;
local_transition        = 'initial' '->' id      [':' trigger]
                        | id        '->' 'final' [':' trigger]
                        ;
external_transition     = id '->' id [':' trigger]
                        ;
trigger                 = trigger_name {',' trigger_name}* [guard_decl] [effect_decl]
                        ;
behavior                = ('entry'|'exit'|'do') [effect_decl]
                        ;

(* Tokens & Expressions *)
id                      = id_base {[id_region] [id_scope]}*
                        | id_conn_point
                        ;
id_region               = '[' id ']'
                        ;
id_scope                = '::' id
                        ;
id_conn_point           = id '.' id_base
                        ;
state_name              = id_base
                        ;
submachine_name         = id_base
                        ;
trigger_name            = id_base
                        ;
@name
id_base                 = /\w+/
                        ;
expr                    = /.+/
                        ;
guard_decl              = '[' guard_expr ']'
                        ;
guard_expr              = /[^\]\n]+/
                        ;
effect_decl             = '/' expr
                        ;
