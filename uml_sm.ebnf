(* EBNF representation of UML 2.5 Behavior StateMachine *)
(* Copyright 2018 Ryan Chaves *)
@@grammar::UML_SM


(* Language keywords *)
@@keyword               :: stm
@@keyword               :: conn_point
@@keyword               :: initial
@@keyword               :: final
@@keyword               :: deepHistory
@@keyword               :: shallowHistory
@@keyword               :: join
@@keyword               :: fork
@@keyword               :: junction
@@keyword               :: choice
@@keyword               :: entryPoint
@@keyword               :: exitPoint
@@keyword               :: terminate
@@keyword               :: state
@@keyword               :: region
@@keyword               :: entry
@@keyword               :: exit
@@keyword               :: do
@@keyword               :: self

(* Grammar *)
file_input              = state_machine $
                        ;
state_machine           = 'stm' ~ stm_name:id_base '{' {region_member:region_member}+ '}'
                        ;
region_member           = vertex
                        | transition
                        | fork_decl
                        | choice_decl
                        ;
vertex                  = pseudostate
                        | state
                        | submachine_state
                        ;
pseudostate             = 'deepHistory'     ~ deepHistory:id_base
                        | 'shallowHistory'  ~ shallowHistory:id_base
                        | 'join'            ~ join:id_base ['->' target:id [effect:effect_decl]]
                        | 'fork'            ~ fork:id_base
                        | 'junction'        ~ junction:id_base
                        | 'choice'          ~ choice:id_base
                        | entrypoint:entrypoint_decl
                        | exitpoint:exitpoint_decl
                        | 'terminate'
                        ;
fork_decl               = 'fork' ~ fork:id_base '{' {transition:fork_transition}+ '}'
                        ;
fork_transition         = '->' target:id [effect:effect_decl]
                        ;
choice_decl             = 'choice' ~ choice:id_base '{' {transition:choice_transition}+ '}'
                        ;
choice_transition       = '->' target:id guard:guard_decl
                        ;
entrypoint_decl         = 'entryPoint' ~ name:id_base ['->' target:id [[guard:guard_decl] effect:effect_decl]]
                        ;
exitpoint_decl          = 'exitPoint'  ~ name:id_base ['->' target:id [[guard:guard_decl] effect:effect_decl]]
                        ;
state                   = 'state'  ~ name:id_base ['{' {region_member:region_member|region:region|behavior:behavior}+ '}']
                        ;
region                  = 'region' ~ name:id_base '{' {region_member:region_member}+ '}'
                        ;
submachine_state        = 'submachine' ~ name:id_submachine ['{' {entry_point:submachine_entrypoint|exit_point:submachine_exitpoint}+ '}']
                        ;
submachine_entrypoint   = 'entryPoint' ~ @:id_base
                        ;
submachine_exitpoint    = 'exitPoint' ~ @:id_base
                        ;
transition              = local_transition
                        | external_transition
                        | internal_transition
                        ;
internal_transition     = 'self' ~ trigger:trigger_list [guard:guard_decl] [effect:effect_decl]
                        ;
local_transition        = src:'initial' ~ '->' target:id        [trigger:trigger_list] [guard:guard_decl] [effect:effect_decl]
                        | src:id_base     '->' target:'final' ~ [trigger:trigger_list] [guard:guard_decl] [effect:effect_decl]
                        ;
external_transition     = src:id          '->' target:id        [trigger:trigger_list] [guard:guard_decl] [effect:effect_decl]
                        ;
trigger_list            = ':' name:trigger_expr {',' name:trigger_expr}
                        ;
behavior                = kind:('entry'|'exit'|'do') ~ effect:effect_decl
                        ;
guard_decl              = '?' '[' ~ @:guard_expr ']'
                        ;
effect_decl             = '/' @:expr
                        ;

(* Tokens & Expressions *)
id                      = ['::'] @:id_main
                        ;
id_main                 = name:id_base {(region:id_region)|(scope:id_scope)} ['.' conn_point:id_base]
                        ;
id_region               = '[' ~  @:id_main ']'
                        ;
id_scope                = '::' ~ @:id_main
                        ;
id_submachine           = state:id_base ':' ~ submachine:id_base
                        ;
@name
id_base                 = /\w+/
                        ;
expr                    = /.+/
                        ;
guard_expr              = /[^\s\]]+/
                        ;
trigger_expr            = /[^\s,]+/
                        ;
